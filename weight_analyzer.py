"""
Summary:
Date: 29/01/2024
Author: Mathias Herl√∏v Lund
Version: 1.0
Description: This script aims to analyze data generated by weight_recorder in the form of dates.txt and weights.txt. 
The analysis includes fitting the weight data to both a linear and a polynomial regression model for trend analysis, and calculating statistics such as mean and median.
Input: dates.txt and weights.txt
Format of dates: date.strftime("%d/%m/%Y")
Format of weights: float
"""

import numpy as np
import datetime
import matplotlib.dates as mdates
import os
import sys
import matplotlib.pyplot as plt
from scipy import stats

def main():
    if not os.path.exists("weights.txt") or not os.path.exists("dates.txt"):
        print("Data files not found.")
        sys.exit()

    # Load data
    try:
        dates = np.loadtxt("dates.txt", dtype=str, ndmin=1)
        weights = np.loadtxt("weights.txt", ndmin=1)
    except:
        print("Error loading data files.")
        sys.exit()

    # Convert dates to datetime objects for analysis
    try:
        dates = [datetime.datetime.strptime(date, "%d/%m/%Y") for date in dates]
    except ValueError as e:
        print(f"Error in date conversion: {e}")
        sys.exit()

    # Convert dates to ordinal numbers for analysis
    dates_ordinal = [date.toordinal() for date in dates]

    # Linear regression
    slope, intercept, r_value, p_value, std_err = stats.linregress(dates_ordinal, weights)
    linear_fit = slope * np.array(dates_ordinal) + intercept

    # Polynomial trend analysis
    degree = 2  # Degree of the polynomial to fit
    coefs = np.polyfit(dates_ordinal, weights, degree)
    poly = np.poly1d(coefs)
    trend_dates = np.linspace(min(dates_ordinal), max(dates_ordinal), len(dates))
    poly_fit = poly(trend_dates)

    # Plot the actual weights, linear fit, and polynomial fit
    fig, ax = plt.subplots()
    ax.plot(dates, weights, 'o', label='Actual weights')
    ax.plot(mdates.num2date(dates_ordinal), linear_fit, label='Linear fit', linestyle='--')
    ax.plot(mdates.num2date(trend_dates), poly_fit, label='Polynomial fit')
    ax.set_xlabel('Date')
    ax.set_ylabel('Weight [kg]')
    ax.set_title('Weight Trend Analysis')
    ax.legend()
    plt.show()

    # Basic statistics
    mean_weight = np.mean(weights)
    median_weight = np.median(weights)
    std_dev_weight = np.std(weights)

    print(f"Mean weight: {mean_weight:.2f} kg")
    print(f"Median weight: {median_weight:.2f} kg")
    print(f"Standard Deviation: {std_dev_weight:.2f} kg")

    # Optionally, save the statistics to a text file
    with open('weight_statistics.txt', 'w') as f:
        f.write(f"Mean weight: {mean_weight:.2f} kg\n")
        f.write(f"Median weight: {median_weight:.2f} kg\n")
        f.write(f"Standard Deviation: {std_dev_weight:.2f} kg\n")

if __name__ == "__main__":
    main()
